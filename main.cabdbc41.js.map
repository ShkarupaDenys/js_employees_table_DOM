{"version":3,"sources":["scripts/main.js"],"names":["table","document","querySelector","tbody","form","createElement","offices","currentKey","classList","add","innerHTML","map","office","value","split","join","insertAdjacentElement","isInvalidAge","age","isInvalidName","employeeName","length","isInvalidSalary","salary","convertSalaryToNumber","Number","textContent","replace","showNotification","param","isValid","type","notification","className","toLowerCase","setAttribute","getDescription","elem","name","body","append","setTimeout","deleteNotification","remove","convertSalaryToThousand","numb","toLocaleString","addEventListener","e","target","closest","isAge","isSalary","includes","isOffice","currentValue","isActive","input","focus","handleCell","setUpValue","isInvalidSalaryValue","convertedSalary","isInvalid","isValidValue","ev","key","heading","td","button","element","arrayOfEmployees","isCountable","tr","employees","querySelectorAll","person","children","personName","position","renderEmployee","employee","Object","keys","forEach","el","newTd","renderEmployees","parentElement","find","contains","sort","a","b","localeCompare","preventDefault","formData","FormData","data","fromEntries","entries","employeeData","push","addToTable"],"mappings":"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","file":"main.cabdbc41.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\n// ==========  GLOBAL VARIABLES  ==========\n\nconst table = document.querySelector('table');\nconst tbody = table.querySelector('tbody');\nconst form = document.createElement('form');\nconst offices = [\n  'Tokyo',\n  'Singapore',\n  'London',\n  'New York',\n  'Edinburgh',\n  'San Francisco',\n];\n\nlet currentKey = '';\n\n// ==========  ADD FORM TO THE PAGE  ==========\n\nform.classList.add('new-employee-form');\n\nform.innerHTML = `\n  <label>\n    Name:\n    <input\n      name='name'\n      type='text'\n      data-qa='name'\n    />\n  </label>\n  <label>\n    Position:\n    <input\n      name='position'\n      type='text'\n      data-qa='position'\n    />\n  </label>\n  <label>\n    Office:\n    <select\n      name='office'\n      data-qa='office'\n    >\n    ${offices.map(office => {\n    const value = office.split(' ').join('-');\n\n    return `<option value=${value}>${office}</option>`;\n  })}\n    </select>\n  </label>\n  <label>\n    Age:\n    <input\n      name='age'\n      type='number'\n      data-qa='age'\n    />\n  </label>\n  <label>\n    Salary:\n    <input\n      name='salary'\n      type='number'\n      data-qa='salary'\n    />\n  </label>\n  <button>Save to table</button>\n`;\n\ntable.insertAdjacentElement('afterend', form);\n\n// ==========  GLOBAL FUNCTIONS  ==========\n\nconst isInvalidAge = age => age < 18 || age > 90;\nconst isInvalidName = employeeName => employeeName.length < 4;\nconst isInvalidSalary = salary => salary <= 0 || salary >= 1000000;\n\nconst convertSalaryToNumber = salary =>\n  Number(salary.textContent.replace('$', '').replace(',', ''));\n\nconst showNotification = (param, isValid = false) => {\n  const type = isValid ? 'Success' : 'Error';\n  const deleteNotification = notice => notice.remove();\n\n  const getDescription = elem => {\n    switch (elem) {\n      case 'name':\n        return `The <strong>${elem}</strong> is not correct.\n          Should be more than 4 letters`;\n\n      case 'position':\n        return `The <strong>${elem}</strong> is required`;\n\n      case 'age':\n        return `The <strong>${elem}</strong> of employee should be from to 90`;\n\n      case 'salary':\n        return `The <strong>${elem}</strong> should be not more 1,000,000`;\n\n      case 'office':\n        return `The <strong>${elem}</strong> should be from list of theoffices`;\n\n      default:\n        return `Employee <strong>${elem.name}</strong> was added to table`;\n    }\n  };\n\n  const notification = document.createElement('div');\n\n  notification.className = `notification ${type.toLowerCase()}`;\n  notification.setAttribute('data-qa', 'notification');\n\n  notification.innerHTML = `\n      <h2 class='title'>${type}</h2>\n      <p>${getDescription(param)}</p>\n  `;\n\n  document.body.append(notification);\n\n  setTimeout(() => deleteNotification(notification), 2000);\n};\n\nconst convertSalaryToThousand = numb => `$${numb.toLocaleString('en-US')}`;\n\n// ==========  EDIT CELL  ==========\n\ndocument.addEventListener('dblclick', e => {\n  const elem = e.target.closest('td');\n\n  if (!elem) {\n    return;\n  }\n\n  const isAge = +elem.textContent ? true : null;\n  const isSalary = elem.textContent.includes('$');\n  const isOffice = offices.includes(elem.textContent);\n\n  const currentValue = elem.textContent;\n  const isActive = document.querySelector('.cell-input');\n\n  if (isActive) {\n    isActive.remove();\n  }\n\n  const input = document.createElement('input');\n\n  if (isAge || isSalary) {\n    input.type = 'number';\n  }\n\n  input.className = 'cell-input';\n  elem.textContent = '';\n  elem.append(input);\n  input.focus();\n\n  // ==========  SET UP VALUE TO THE CELL  ==========\n\n  const handleCell = value => {\n    elem.textContent = value;\n    input.remove();\n  };\n\n  const setUpValue = () => {\n    switch (true) {\n      case !input.value:\n        handleCell(currentValue);\n\n        break;\n\n      case isSalary:\n        const isInvalidSalaryValue = isInvalidSalary(Number(input.value));\n\n        if (isInvalidSalaryValue) {\n          handleCell(currentValue);\n          showNotification('salary');\n\n          return;\n        };\n\n        const convertedSalary = convertSalaryToThousand(+input.value);\n\n        handleCell(convertedSalary);\n\n        break;\n\n      case isAge:\n        const value = Number(input.value);\n        const isInvalid = isInvalidAge(value);\n\n        if (isInvalid) {\n          handleCell(currentValue);\n          showNotification('age');\n\n          return;\n        }\n\n        handleCell(value);\n\n        break;\n\n      case isOffice:\n        const isValidValue = offices.includes(input.value);\n\n        if (isValidValue) {\n          handleCell(input.value);\n\n          return;\n        }\n\n        handleCell(currentValue);\n        showNotification('office');\n\n        break;\n\n      default:\n        handleCell(input.value);\n    }\n  };\n\n  input.addEventListener('keydown', ev =>\n    ev.key === 'Enter' ? setUpValue() : false\n  );\n\n  input.addEventListener('blur', setUpValue);\n});\n\n// ==========  SORT, SELECT, ADD EMPLOYEE  ==========\n\ndocument.addEventListener('click', e => {\n  const heading = e.target.closest('thead th');\n  const td = e.target.closest('tbody td');\n  const button = e.target.closest('form button');\n\n  if (!heading && !td && !button) {\n    return;\n  }\n\n  const element = e.target;\n\n  const employees = [...document.querySelectorAll('tbody tr')].map(person => {\n    const [personName, position, office, age, salary] = [...person.children];\n\n    return {\n      name: personName.textContent,\n      position: position.textContent,\n      office: office.textContent,\n      age: Number(age.textContent),\n      salary: convertSalaryToNumber(salary),\n    };\n  });\n\n  // ==========  SELECT ROW  ==========\n\n  const selectRow = el => {\n    const tr = el.parentElement;\n    const isActive = [...tr.parentElement.children].find(elem =>\n      elem.classList.contains('active')\n    );\n\n    if (isActive) {\n      isActive.classList.remove('active');\n    }\n\n    tr.classList.add('active');\n  };\n\n  // ==========  SORT EMPOYEES  ==========\n\n  const sortEmployees = (arrayOfEmployees, elem) => {\n    const key = elem.textContent.toLowerCase();\n    const isCountable = key === 'age' || key === 'salary';\n\n    arrayOfEmployees.sort((a, b) => {\n      if (isCountable) {\n        if (currentKey !== key) {\n          return a[key] - b[key];\n        }\n\n        return b[key] - a[key];\n      }\n\n      if (currentKey !== key) {\n        return a[key].localeCompare(b[key]);\n      }\n\n      return b[key].localeCompare(a[key]);\n    });\n\n    currentKey = currentKey !== key ? (currentKey = key) : (currentKey = '');\n\n    [...tbody.children].forEach(el => el.remove());\n\n    renderEmployees(arrayOfEmployees);\n  };\n\n  // ==========  ADD EMPOYEE TO TABLE  ==========\n\n  const addToTable = () => {\n    e.preventDefault();\n\n    const formData = new FormData(form);\n    const data = Object.fromEntries(formData.entries());\n\n    const employeeData = {\n      ...data,\n      office: data.office.split('-').join(' '),\n      age: Number(data.age),\n      salary: Number(data.salary),\n    };\n\n    const { name: employeeName, position, age, salary } = employeeData;\n\n    let isValid = false;\n\n    // ==========  RESET FORM  ==========\n\n    const resetForm = () =>\n      form.querySelectorAll('input').forEach(input => {\n        input.value = '';\n      });\n\n    // ==========  VALIDATE FIELDS  ==========\n\n    switch (true) {\n      case isInvalidName(employeeName):\n        showNotification('name', isValid);\n        break;\n\n      case !position:\n        showNotification('position', isValid);\n        break;\n\n      case isInvalidAge(age):\n        showNotification('age', isValid);\n        break;\n\n      case isInvalidSalary(salary):\n        showNotification('salary', isValid);\n        break;\n\n      default:\n        employees.push(employeeData);\n        isValid = true;\n        showNotification(employeeData, isValid);\n        renderEmployee(employeeData);\n        resetForm();\n    }\n  };\n\n  // ==========  RENDER EMPLOYEE  ==========\n\n  const renderEmployee = employee => {\n    const tr = document.createElement('tr');\n\n    Object.keys(employee).forEach(el => {\n      const newTd = document.createElement('td');\n\n      if (el === 'salary') {\n        employee[el] = convertSalaryToThousand(employee[el]);\n      }\n\n      newTd.textContent = employee[el];\n      tr.append(newTd);\n    });\n\n    tbody.append(tr);\n  };\n\n  // ==========  RENDER EMPLOYEES  ==========\n\n  const renderEmployees = arrayOfEmployees =>\n    arrayOfEmployees.map(employee => renderEmployee(employee));\n\n  // ==========  CHECK TYPE ACTION  ==========\n\n  switch (element) {\n    case td:\n      selectRow(element);\n      break;\n\n    case heading:\n      sortEmployees(employees, heading);\n\n      break;\n\n    case button:\n      addToTable();\n  }\n});\n"]}